source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
View(graph)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
rm(list=ls())
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("C:/Users/bruno/OneDrive - Universidade de Lisboa/PE/Projeto Computacional/Q5/Q5.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library("ggplot2")
library("openxlsx")
#Import data
Utentes <- read.xlsx("C:/Users/maste/Desktop/Probabilidade e Estatística/Projeto/Ex4/Utentes.xlsx", sheet = 1, colNames = TRUE, cols = c(2, 4))
#Plot
ggplot(Utentes, aes(x = Colesterol, y = TAD)) +
geom_point(size=1, color="red") +
geom_smooth(method=lm, se=FALSE) +
labs(title = "TAD em Função do Colesterol", x = "Colesterol", y = "TAD")
set.seed(1520)
amostra<-rexp(532, 0.14) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(2.0) #Empirical value
tv = pexp(2.0, rate=0.14, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(1520)
amostra<-rexp(532, 0.14) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(2.0) #Empirical value
tv = pexp(2.0, rate=0.14, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(1529)
amostra<-rexp(738, 0.37) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(3.0) #Empirical value
tv = pexp(3.0, rate=0.37, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(1397)
amostra<-rexp(583, 0.2) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(8.0) #Empirical value
tv = pexp(8.0, rate=0.2, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(1529)
amostra<-rexp(738, 0.37) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(3.0) #Empirical value
tv = pexp(3.0, rate=0.37, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(1529)
amostra<-rexp(738, 0.37) #Generate random distribution with given seed
FD=ecdf(amostra) #Get distribution function
ev = FD(3.0) #Empirical value
tv = pexp(3.0, rate=0.37, log=FALSE) #Theoric value
#Diference:
dif=tv-ev
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(151)
medias=c()
for(i in 1:6435)
{
amostra<-rbinom(153, 1, 0.37)
medias<-append(medias, mean(amostra))
}
#Media das medias
ve = mean(medias)
#Media teorica
vt = 0.37
#Diferenca
dif=vt - ve
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(151)
medias=c()
for(i in 1:6435)
{
amostra<-rbinom(153, 1, 0.37)
medias<-append(medias, mean(amostra))
}
#Media das medias
ve = mean(medias)
#Media teorica
vt = 0.37
#Diferenca
dif=vt - ve
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(745)
medias=c()
for(i in 1:5070)
{
amostra<-rbinom(27, 41, 0.78)
medias<-append(medias, mean(amostra))
}
#Media das medias
ve = mean(medias)
#Media teorica
vt = 41*0.78
#Diferenca
dif=vt - ve
#With 6 decimal places
format(round(dif, 6), nsmall=6)
set.seed(63)
amp=c()
cfi=c()
for(i in 1:1300)
{
amostra<-rexp(1194, 2.42)                   #Generate sample
cfi = t.test(amostra, conf.level=0.92)$"conf.int"  #Get confidence level
amp<-append(amp, cfi[2]-cfi[1])                    #Get amplitude
}
#Mean of the amplitudes
res=mean(amp)
#With 6 decimal places
format(round(res, 6), nsmall=6)
set.seed(18)
amp=c()
cfi=c()
for(i in 1:1450)
{
amostra<-rexp(942, 3.45)                   #Generate sample
cfi = t.test(amostra, conf.level=0.93)$"conf.int"  #Get confidence level
amp<-append(amp, cfi[2]-cfi[1])                    #Get amplitude
}
#Mean of the amplitudes
res=mean(amp)
#With 6 decimal places
format(round(res, 6), nsmall=6)
set.seed(63)
amp=c()
cfi=c()
for(i in 1:1300)
{
amostra<-rexp(1194, 2.42)                   #Generate sample
cfi = t.test(amostra, conf.level=0.92)$"conf.int"  #Get confidence level
amp<-append(amp, cfi[2]-cfi[1])                    #Get amplitude
}
#Mean of the amplitudes
res=mean(amp)
#With 6 decimal places
format(round(res, 6), nsmall=6)
